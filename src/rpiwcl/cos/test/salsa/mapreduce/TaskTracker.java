package rpiwcl.cos.test.salsa.mapreduce;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import rpiwcl.cos.test.salsa.mapreduce.*;

public class TaskTracker extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		TaskTracker instance = (TaskTracker)new TaskTracker(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new TaskTracker(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return TaskTracker.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new TaskTracker(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return TaskTracker.getReferenceByLocation(new UAL(ual)); }
	public TaskTracker(boolean o, UAN __uan)	{ super(false,__uan); }
	public TaskTracker(boolean o, UAL __ual)	{ super(false,__ual); }
	public TaskTracker(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public TaskTracker(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public TaskTracker(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public TaskTracker()		{  }
	public TaskTracker(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "rpiwcl.cos.test.salsa.mapreduce.TaskTracker", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (int id, Mapper mapper, Reducer combiner, Reducer reducer, String farmerUAN) {
		Object[] __arguments = { new Integer(id), mapper, combiner, reducer, farmerUAN };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public TaskTracker self;
		public void updateSelf(ActorReference actorReference) {
			((TaskTracker)actorReference).setUAL(getUAL());
			((TaskTracker)actorReference).setUAN(getUAN());
			self = new TaskTracker(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "rpiwcl.cos.test.salsa.mapreduce.TaskTracker$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		int id;
		Mapper mapper;
		Reducer combiner;
		Reducer reducer;
		Context cont;
		ActorReference farmer = null;
		int numTasks = 0, minBurst = 0;
		Vector texts = null;
		int REPORT_PROGRESS_INTERVAL = 10000;
		int BURST_MAP_EXECUTION_TIME = 3000;
		double MIN_BURST_PERCENTAGE = 0.05;
		void construct(int id, Mapper mapper, Reducer combiner, Reducer reducer, String farmerUAN){
			this.id = id;
			this.mapper = mapper;
			this.combiner = combiner;
			this.reducer = reducer;
			this.cont = new Context();
			this.farmer = (MapReduce)MapReduce.getReferenceByName(farmerUAN);
		}
		long lastReportedTime = 0;
		public int reportMapProgress(boolean report, int completed) {
			long currentTime = 0;
			boolean report_ = report;
			if (!report) {{
				currentTime = System.currentTimeMillis();
				if (lastReportedTime+REPORT_PROGRESS_INTERVAL<=currentTime) {{
					report = true;
				}
}			}
}			if (report) {{
				System.out.println(" Mapper "+id+" completed "+completed+"/"+numTasks);
				lastReportedTime = currentTime;
				{
					// farmer<-reportMapProgress(report_, id, completed)
					{
						Object _arguments[] = { report_, id, completed };
						Message message = new Message( self, farmer, "reportMapProgress", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			return completed;
		}
		public int runMapperBurst(int iter) {
			long startTime = System.currentTimeMillis();
do {
				if (texts.size()<minBurst) {minBurst = texts.size();
}				for (int i = 0; i<minBurst; i++)mapper.map((String)texts.remove(0), cont);
				iter += minBurst;
			}
 while (0<texts.size()&&startTime+BURST_MAP_EXECUTION_TIME>System.currentTimeMillis());
			return iter;
		}
		public void runMapperIter(int iter) {
			if (iter==this.numTasks) {			return;
}			Token t1 = new Token("t1");
			{
				// token t1 = runMapperBurst(iter)
				{
					Object _arguments[] = { iter };
					Message message = new Message( self, self, "runMapperBurst", _arguments, null, t1 );
					__messages.add( message );
				}
			}
			Token t2 = new Token("t2");
			{
				// token t2 = reportMapProgress(false, t1)
				{
					Object _arguments[] = { false, t1 };
					Message message = new Message( self, self, "reportMapProgress", _arguments, null, t2 );
					__messages.add( message );
				}
			}
			{
				// runMapperIter(t2)
				{
					Object _arguments[] = { t2 };
					Message message = new Message( self, self, "runMapperIter", _arguments, null, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		long startTime = 0;
		public HashMap runMapper(Vector texts) {
			this.numTasks = texts.size();
			this.minBurst = (int)(numTasks*MIN_BURST_PERCENTAGE);
			this.texts = texts;
			cont.clear();
			System.out.println("Mapper "+id+" started (#tasks = "+numTasks+")");
			startTime = System.currentTimeMillis();
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				// runMapperIter(0)
				{
					Object _arguments[] = { new Integer(0) };
					Message message = new Message( self, self, "runMapperIter", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// reportMapProgress(true, numTasks)
				{
					Object _arguments[] = { true, numTasks };
					Message message = new Message( self, self, "reportMapProgress", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// runCombiner()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "runCombiner", _arguments, token_2_1, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public HashMap runCombiner() {
			System.out.println("Mapper "+id+" finished (elapsed time = "+((double)(System.currentTimeMillis()-startTime)/1000)+"s)");
			if (combiner==null) {{
				System.out.println(" No combiner defined");
				return cont.getMap();
			}
}			HashMap map = cont.getMap();
			Iterator it = map.entrySet().iterator();
			int numTasks = map.entrySet().size();
			Context context = new Context();
			System.out.println(" Combiner "+id+" started (#tasks = "+numTasks+")");
			long startTime = System.currentTimeMillis();
			while (it.hasNext()) {
				Map.Entry entry = (Map.Entry)it.next();
				combiner.reduce((String)entry.getKey(), (Vector)entry.getValue(), context);
				it.remove();
			}
			System.out.println(" Combiner "+id+" finished (elapsed time = "+((double)(System.currentTimeMillis()-startTime)/1000)+"s)");
			return context.getMap();
		}
		public HashMap runReducer(HashMap map) {
			if (reducer==null) {			return map;
}			Iterator it = map.entrySet().iterator();
			int numTasks = map.entrySet().size();
			Context cont = new Context();
			System.out.println("  Reducer "+id+" started (#tasks = "+numTasks+")");
			long startTime = System.currentTimeMillis();
			int task = 0;
			while (it.hasNext()) {
				Map.Entry entry = (Map.Entry)it.next();
				reducer.reduce((String)entry.getKey(), (Vector)entry.getValue(), cont);
				it.remove();
			}
			System.out.println("  Reducer "+id+" finished (elapsed time = "+((double)(System.currentTimeMillis()-startTime)/1000)+"s)");
			return cont.getMap();
		}
	}
}