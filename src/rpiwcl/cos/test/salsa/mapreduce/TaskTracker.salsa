module salsa.examples.mapreduce;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import salsa.examples.mapreduce.*;


behavior TaskTracker {
    int id;
    Mapper mapper;
    Reducer combiner;
    Reducer reducer;
    Context cont;

    ActorReference farmer = null;
    int numTasks = 0, minBurst = 0;
    Vector texts = null;
    int REPORT_PROGRESS_INTERVAL = 10000;       // report progress every this milliseconds
    int BURST_MAP_EXECUTION_TIME = 3000;        // mapper executes at least this time for every turn
    double MIN_BURST_PERCENTAGE = 0.05;         // minBurst = numTasks * this percentage

    TaskTracker( int id, Mapper mapper, Reducer combiner, Reducer reducer, String farmerUAN ) {
        this.id = id;
        this.mapper = mapper;
        this.combiner = combiner;
        this.reducer = reducer;
        this.cont = new Context();
        this.farmer = (MapReduce)MapReduce.getReferenceByName( farmerUAN  );
    }

    long lastReportedTime = 0;
    int reportMapProgress( boolean report, int completed ) {
        long currentTime = 0;
        boolean report_ = report;

        if (!report) {
            currentTime = System.currentTimeMillis();
            if (lastReportedTime + REPORT_PROGRESS_INTERVAL <= currentTime) {
                report = true;
            }
        }

        if (report) {
            System.out.println( " Mapper " + id + " completed " + completed + "/" + numTasks );
            lastReportedTime = currentTime;

            // farmer<-reportMapProgress( report_, id, completed )@currentContinuation;
            farmer<-reportMapProgress( report_, id, completed );
        }

        return completed;
    }


    int runMapperBurst( int iter ) {
        long startTime = System.currentTimeMillis();
        
        do {
            if (texts.size() < minBurst)
                minBurst = texts.size();

            for (int i = 0; i < minBurst; i++)
                mapper.map( (String)texts.remove( 0 ), cont );

            iter += minBurst;
            // System.out.println( " Mapper " + id + " texts.size()=" + texts.size() + ", iter=" + iter );

        } while (0 < texts.size() &&
                 startTime + BURST_MAP_EXECUTION_TIME > System.currentTimeMillis() );

        return iter;
    }


    void runMapperIter( int iter ) {
        if (iter == this.numTasks)
            return;
        
        token t1 = runMapperBurst( iter );
        token t2 = reportMapProgress( false, t1 );
        runMapperIter( t2 )@currentContinuation;
    }

    long startTime = 0;
    HashMap runMapper( Vector texts ) {
        this.numTasks = texts.size();
        this.minBurst = (int)(numTasks * MIN_BURST_PERCENTAGE);
        this.texts = texts;
        cont.clear();

        System.out.println( "Mapper " + id + " started (#tasks = " + numTasks + ")" );
        startTime = System.currentTimeMillis();
        
        runMapperIter( 0 )@
        reportMapProgress( true, numTasks )@
        runCombiner()@currentContinuation;
    }        

    HashMap runCombiner() {
        System.out.println( "Mapper " + id + " finished (elapsed time = " +
                            ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );

        if (combiner == null) {
            System.out.println( " No combiner defined" );
            return cont.getMap();
        }

        HashMap map = cont.getMap();
        Iterator it = map.entrySet().iterator();
        int numTasks = map.entrySet().size();
        Context context = new Context();

        System.out.println( " Combiner " + id + " started (#tasks = " + numTasks + ")" );
        long startTime = System.currentTimeMillis();

        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry)it.next();
            combiner.reduce( (String)entry.getKey(), (Vector)entry.getValue(), context );
            it.remove();
        }

        System.out.println( " Combiner " + id + " finished (elapsed time = " +
                            ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );
        
        return context.getMap();
    }

    HashMap runReducer( HashMap map ) {
        if (reducer == null)
            return map;

        Iterator it = map.entrySet().iterator();
        int numTasks = map.entrySet().size();
        Context cont = new Context();

        System.out.println( "  Reducer " + id + " started (#tasks = " + numTasks + ")" );
        long startTime = System.currentTimeMillis();

        int task = 0;
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry)it.next();
            reducer.reduce(  (String)entry.getKey(), (Vector)entry.getValue(), cont );
            // reportReduceProgress( new Integer( task++ ) );
            it.remove();
        }

        System.out.println( "  Reducer " + id + " finished (elapsed time = " +
                            ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );

        return cont.getMap();
    }
}
