module salsa.examples.mapreduce;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import salsa.examples.mapreduce.*;


behavior TaskTracker {
    int id;
    Mapper mapper;
    Reducer combiner;
    Reducer reducer;

    TaskTracker( int id, Mapper mapper, Reducer combiner, Reducer reducer ) {
        this.id = id;
        this.mapper = mapper;
        this.combiner = combiner;
        this.reducer = reducer;
    }


    HashMap runMapper( Vector texts ) {
        int numTexts = texts.size();

        Context cont = new Context();
        for (int i = 0; i < numTexts; i++) {
            String text = (String)texts.remove( 0 );
            mapper.map( text, cont );
        }

        runCombiner( cont )@currentContinuation;
    }

    HashMap runCombiner( Context context ) {
        if (combiner == null)
            return context.getMap();
        
        HashMap map = context.getMap();
        Context cont = new Context();

        Iterator it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry)it.next();
            combiner.reduce( (String)entry.getKey(), (Vector)entry.getValue(), cont );
            it.remove();
        }
        
        returnMap( cont )@currentContinuation;
    }

    HashMap returnMap( Context context ) {
        return context.getMap();
    }

    HashMap runReducer( HashMap map ) {
        if (reducer == null)
            return map;

        Iterator it = map.entrySet().iterator();
        Context cont = new Context();

        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry)it.next();
            reducer.reduce(  (String)entry.getKey(), (Vector)entry.getValue(), cont );
            it.remove();
        }

        returnMap( cont )@currentContinuation;
    }
}
