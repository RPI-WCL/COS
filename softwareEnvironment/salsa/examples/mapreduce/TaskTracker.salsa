module salsa.examples.mapreduce;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import salsa.examples.mapreduce.*;


behavior TaskTracker {
    int id;
    Mapper mapper;
    Reducer combiner;
    Reducer reducer;

    ActorReference farmer = null;
    int numMapTasks, numReduceTasks;
    int REPORT_PROGRESS_FREQUENCY = 10; // report progress every 10%

    // TaskTracker( int id, Mapper mapper, Reducer combiner, Reducer reducer, ActorReference farmer ) {
    TaskTracker( int id, Mapper mapper, Reducer combiner, Reducer reducer ) {
        this.id = id;
        this.mapper = mapper;
        this.combiner = combiner;
        this.reducer = reducer;
        this.farmer = farmer;
        this.numMapTasks = 0;
        this.numReduceTasks = 0;
    }

    // int lastReportedMapProgress = 0;
    // void reportMapProgress( Integer completed ) {
    //     double progress = (double)completed.intValue() / numMapTasks;
    //     if (lastReportedMapProgress + REPORT_PROGRESS_FREQUENCY < progress) {
    //         lastReportedMapProgress += REPORT_PROGRESS_FREQUENCY;
    //         farmer<-reportMapProgress( completed )@currentContinuation;
    //     }
    // }

    HashMap runMapper( Vector texts ) {

        int numTasks = texts.size();
        Context cont = new Context();

        System.out.println( "Mapper " + id + " started (#tasks = " + numTasks + ")" );
        long startTime = System.currentTimeMillis();

        for (int task = 0; task < numTasks; task++) {
            String text = (String)texts.remove( 0 );
            mapper.map( text, cont );
            // reportMapProgress( new Integer( task ) );
        }

        System.out.println( "Mapper " + id + " finished (elapsed time = " +
                            ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );

        runCombiner( cont )@currentContinuation;
    }

    HashMap runCombiner( Context context ) {
        if (combiner == null) {
            System.out.println( " No combiner defined" );
            return context.getMap();
        }

        HashMap map = context.getMap();
        Iterator it = map.entrySet().iterator();
        int numTasks = map.entrySet().size();
        Context cont = new Context();

        System.out.println( " Combiner " + id + " started (#tasks = " + numTasks + ")" );
        long startTime = System.currentTimeMillis();

        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry)it.next();
            combiner.reduce( (String)entry.getKey(), (Vector)entry.getValue(), cont );
            it.remove();
        }

        System.out.println( " Combiner " + id + " finished (elapsed time = " +
                            ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );
        
        returnMap( cont )@currentContinuation;
    }

    HashMap returnMap( Context context ) {
        return context.getMap();
    }



    // int lastReportedReduceProgress = 0;
    // void reportReduceProgress( Integer completed ) {
    //     double progress = (double)completed.intValue() / numReduceTasks;
    //     if (lastReportedReduceProgress + REPORT_PROGRESS_FREQUENCY < progress) {
    //         lastReportedReduceProgress += REPORT_PROGRESS_FREQUENCY;
    //         farmer<-reportReduceProgress( completed )@currentContinuation;
    //     }
    // }

    HashMap runReducer( HashMap map ) {
        int numTasks = map.entrySet().size();
        System.out.println( "  Reducer " + id + " started (#tasks = " + numTasks + ")" );
        return map;

        // if (reducer == null)
        //     return map;

        // Iterator it = map.entrySet().iterator();
        // int numTasks = map.entrySet().size();
        // Context cont = new Context();

        // System.out.println( "  Reducer " + id + " started (#tasks = " + numTasks + ")" );
        // long startTime = System.currentTimeMillis();

        // int task = 0;
        // while (it.hasNext()) {
        //     Map.Entry entry = (Map.Entry)it.next();
        //     reducer.reduce(  (String)entry.getKey(), (Vector)entry.getValue(), cont );
        //     // reportReduceProgress( new Integer( task++ ) );
        //     it.remove();
        // }

        // System.out.println( "  Reducer " + id + " finished (elapsed time = " +
        //                     ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );

        // returnMap( cont )@currentContinuation;
    }
}
