module salsa.examples.mapreduce;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import salsa.examples.mapreduce.*;


behavior MapReduce {
    // mapper/combiner/reducer
    Mapper      mapper;
    Reducer     combiner;
    Reducer     reducer;

    // input/output
    String      inputFile; 
    long        inputFileSize;
    String      outputFile;
        
    // disribution support
	String      nameServer;
	Vector      theaters;
    TaskTracker[]    workers;
    int         numWorkers;

    long        startTime;

    // progress report
    int         numTasks = 0;
    int REPORT_PROGRESS_INTERVAL = 5000; // report progress every this milliseconds
    int[]       completedMapTasks;

    void submitJob( Mapper mapper, Reducer combiner, Reducer reducer,
                    int numWorkers, String inputFile, String outputFile, String nameServer, Vector theaters ) {
        this.mapper = mapper;
        this.combiner = combiner;
        this.reducer = reducer;
        this.numWorkers = numWorkers;
        this.inputFile = inputFile;
        this.inputFileSize = (new File( inputFile )).length();
        this.outputFile = outputFile;
        this.nameServer = nameServer;
        this.theaters = theaters;
        this.workers = new TaskTracker[numWorkers];
        this.completedMapTasks = new int[numWorkers];
        
        runMappers()@
        mergeMapResults( token )@
        runReducers( token )@
        writeOutput( token )@currentContinuation;
    }
    
    Object[] runMappers() {
        long numData = inputFileSize / numWorkers;
        int currentDataSize = 0;
        Vector texts = new Vector();

        startTime = System.currentTimeMillis();
        System.out.println( "Running mappers (inputFileSize = " + (inputFileSize/(1024*1024)) + "Mbytes)..." );

        HashMap map = new HashMap();
        for (int i = 0; i < theaters.size(); i++) {
            String[] dest = ((String)theaters.get( i )).split( "," );
            map.put( dest[0], new Integer( dest[1] ) );
        }

        Iterator it = map.entrySet().iterator();

        join {
            try {
                BufferedReader in = new BufferedReader( new FileReader( inputFile ) );

                int i = 0;
                while ((i < numWorkers) || (0 < map.entrySet().size())) {
                    // split texts to process
                    texts.clear();
                    String text;
                    while ((currentDataSize < (i + 1) * numData) && 
                           (text = in.readLine()) != null) {
                        texts.add( text );
                        currentDataSize += text.length() + 1; // add one for CRLF
                    }

                    // get a theater
                    if (!it.hasNext())
                        it = map.entrySet().iterator();                        
                    Map.Entry entry = (Map.Entry)it.next();
                    String theater = (String)entry.getKey();

                    // create an actor on the theater
                    System.out.println( " Creating actor uan://" + nameServer + "/a" + i + 
                                        " on rmsp://" + theater + "/a" + i );
                    workers[i] = new TaskTracker( i, mapper, combiner, reducer, this.getUAN().toString() ) at (
                        new UAN( "uan://" + nameServer + "/a" + i ), 
                        new UAL( "rmsp://" + theater + "/a" + i ));
                    workers[i]<-runMapper( texts );
                    numTasks += texts.size();

                    // update the hashmap
                    int numActor = ((Integer)entry.getValue()).intValue();
                    if (numActor - 1 == 0) {
                        map.remove( entry.getKey() );
                        it = map.entrySet().iterator();
                    }
                    else
                        map.put( entry.getKey(), new Integer( numActor - 1 ) );
                    
                    i++;
                }

                in.close();

            } catch (IOException ex) {
                System.err.println( " Can't open the file " + inputFile + " for reading" );
            }

        }@dummy( token )@currentContinuation;
    }

    Object[] dummy( Object[] objs ) {
        return objs;
    }

    HashMap mergeMapResults( Object[] objs ) {
        System.out.println( "Merging " + objs.length + " results from mappers" );

        HashMap mergedMap = new HashMap();

        for (int i = 0; i < objs.length; i++) {
            HashMap map = (HashMap)objs[i];
            Iterator it = map.entrySet().iterator();

            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry)it.next();
                Vector value = (Vector)mergedMap.get( entry.getKey() );
                
                if (value == null) {
                    mergedMap.put( entry.getKey(), entry.getValue() );
                }
                else {
                    value.addAll( (Vector)entry.getValue() );
                    mergedMap.put( entry.getKey(), value );
                }
            }
        }
        
        return mergedMap;
    }

    Object[] runReducers( Object obj ) {
        HashMap map = (HashMap)obj;
        Iterator it = map.entrySet().iterator();
        int numKeys = map.entrySet().size();
        int mapSize;
        int numReducers;

        if (numKeys < numWorkers) {
            mapSize = 1;
            numReducers = numKeys;
        }
        else {
            mapSize = numKeys / numWorkers;
            numReducers = numWorkers;
        }

        System.out.println( "Running reducers (#merged keys=" + numKeys + ")..." );

        join {
            int j = 0;
            for (int i = 0; i < numReducers; i++) {
                HashMap newMap = new HashMap();
                while ((j < (i+1) * mapSize) ||
                       ((i == (numReducers - 1)) && (j < numKeys))) {
                    Map.Entry entry = (Map.Entry)it.next();
                    newMap.put( entry.getKey(), entry.getValue() );
                    j++;
                }
                workers[i]<-runReducer( newMap );
            }
        }@dummy( token )@currentContinuation;
    }

    void writeOutput( Object[] objs ) {
        try {
            PrintWriter pw = new PrintWriter( new BufferedWriter( new FileWriter( outputFile ) ) );

            for (int i = 0; i < objs.length; i++) {
                HashMap map = (HashMap)objs[i];
                Iterator it = map.entrySet().iterator();

                String str;
                while (it.hasNext()) {
                    Map.Entry entry = (Map.Entry)it.next();
                    str = entry.getKey() + ", ";

                    Vector value = (Vector)entry.getValue();
                    if ( value.size() == 1 ) {
                        str += value.get( 0 );
                    }
                    else {
                        str += "[";
                        for (int j = 0; j < value.size(); j++) {
                            Object obj = value.get( j );
                            if (j == value.size() - 1)
                                str += obj;
                            else
                                str += obj + ", ";
                        }
                        str += "]";
                    }
                    
                    if (System.getProperty( "stdout" ) != null)
                        System.out.println( str );
                    pw.println( str );
                }
            }

            pw.close();
        } catch (IOException ex) {
            System.err.println( "Can't write the file " + outputFile );
        }

        System.out.println( "Finished (elapsed time = " + 
                            ((double)(System.currentTimeMillis() - startTime) / 1000) + "s)" );
        System.out.println();
    }



    long lastReportedTime = 0;
    int reportMapProgress( boolean report, int id, int completed ) {
        long currentTime = System.currentTimeMillis();
        completedMapTasks[id] = completed;      // #total completed tasks is sent from workers

        if (report ||
            lastReportedTime + REPORT_PROGRESS_INTERVAL <= currentTime) {
            lastReportedTime = currentTime;

            int sum = 0;
            for (int i = 0; i < numWorkers; i++)
                sum += completedMapTasks[i];

            System.out.println( "Map: " + sum + " (" + 
                                (100 * (double)sum / numTasks) + "%) completed" );
        }

        return 0;
    }
}
