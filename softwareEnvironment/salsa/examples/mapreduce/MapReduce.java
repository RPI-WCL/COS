package salsa.examples.mapreduce;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import salsa.examples.mapreduce.*;

public class MapReduce extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		MapReduce instance = (MapReduce)new MapReduce(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new MapReduce(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return MapReduce.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new MapReduce(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return MapReduce.getReferenceByLocation(new UAL(ual)); }
	public MapReduce(boolean o, UAN __uan)	{ super(false,__uan); }
	public MapReduce(boolean o, UAL __ual)	{ super(false,__ual); }
	public MapReduce(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public MapReduce(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public MapReduce(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public MapReduce()		{  }
	public MapReduce(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "salsa.examples.mapreduce.MapReduce", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public MapReduce self;
		public void updateSelf(ActorReference actorReference) {
			((MapReduce)actorReference).setUAL(getUAL());
			((MapReduce)actorReference).setUAN(getUAN());
			self = new MapReduce(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "salsa.examples.mapreduce.MapReduce$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		Mapper mapper;
		Reducer combiner;
		Reducer reducer;
		String inputFile;
		long inputFileSize;
		String outputFile;
		String nameServer;
		Vector theaters;
		TaskTracker[] workers;
		int numWorkers;
		long startTime;
		int numTasks = 0;
		int REPORT_PROGRESS_INTERVAL = 10000;
		int[] completedMapTasks;
		public void submitJob(Mapper mapper, Reducer combiner, Reducer reducer, int numWorkers, String inputFile, String outputFile, String nameServer, Vector theaters) {
			this.mapper = mapper;
			this.combiner = combiner;
			this.reducer = reducer;
			this.numWorkers = numWorkers;
			this.inputFile = inputFile;
			this.inputFileSize = (new File(inputFile)).length();
			this.outputFile = outputFile;
			this.nameServer = nameServer;
			this.theaters = theaters;
			this.workers = new TaskTracker[numWorkers];
			this.completedMapTasks = new int[numWorkers];
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				Token token_2_2 = new Token();
				// runMappers()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "runMappers", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// mergeMapResults(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, self, "mergeMapResults", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// runReducers(token)
				{
					Object _arguments[] = { token_2_1 };
					Message message = new Message( self, self, "runReducers", _arguments, token_2_1, token_2_2 );
					__messages.add( message );
				}
				// writeOutput(token)
				{
					Object _arguments[] = { token_2_2 };
					Message message = new Message( self, self, "writeOutput", _arguments, token_2_2, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public Object[] runMappers() {
			long numData = inputFileSize/numWorkers;
			int currentDataSize = 0;
			Vector texts = new Vector();
			startTime = System.currentTimeMillis();
			System.out.println("Running mappers (inputFileSize = "+(inputFileSize/(1024*1024))+"Mbytes)...");
			HashMap map = new HashMap();
			for (int i = 0; i<theaters.size(); i++){
				String[] dest = ((String)theaters.get(i)).split(",");
				map.put(dest[0], new Integer(dest[1]));
			}
			Iterator it = map.entrySet().iterator();
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				try {
					BufferedReader in = new BufferedReader(new FileReader(inputFile));
					int i = 0;
					while ((i<numWorkers)||(0<map.entrySet().size())) {
						texts.clear();
						String text;
						while ((currentDataSize<(i+1)*numData)&&(text=in.readLine())!=null) {
							texts.add(text);
							currentDataSize += text.length()+1;
						}
						if (!it.hasNext()) {it = map.entrySet().iterator();
}						Map.Entry entry = (Map.Entry)it.next();
						String theater = (String)entry.getKey();
						System.out.println(" Creating actor uan://"+nameServer+"/a"+i+" on rmsp://"+theater+"/a"+i);
						workers[i] = ((TaskTracker)new TaskTracker(new UAN("uan://"+nameServer+"/a"+i), new UAL("rmsp://"+theater+"/a"+i),this).construct(i, mapper, combiner, reducer, this.getUAN().toString()));
						{
							// workers[i]<-runMapper(texts)
							{
								Object _arguments[] = { texts };
								Message message = new Message( self, workers[i], "runMapper", _arguments, null, token_2_0 );
								__messages.add( message );
							}
						}
						numTasks += texts.size();
						int numActor = ((Integer)entry.getValue()).intValue();
						if (numActor-1==0) {{
							map.remove(entry.getKey());
							it = map.entrySet().iterator();
						}
}						else {map.put(entry.getKey(), new Integer(numActor-1));
}						i++;
					}
					in.close();
				}
				catch (IOException ex) {
					System.err.println(" Can't open the file "+inputFile+" for reading");
				}

				addJoinToken(token_2_0);
				// dummy(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, self, "dummy", _arguments, token_2_0, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public Object[] dummy(Object[] objs) {
			return objs;
		}
		public HashMap mergeMapResults(Object[] objs) {
			System.out.println("Merging "+objs.length+" results from mappers");
			HashMap mergedMap = new HashMap();
			for (int i = 0; i<objs.length; i++){
				HashMap map = (HashMap)objs[i];
				Iterator it = map.entrySet().iterator();
				while (it.hasNext()) {
					Map.Entry entry = (Map.Entry)it.next();
					Vector value = (Vector)mergedMap.get(entry.getKey());
					if (value==null) {{
						mergedMap.put(entry.getKey(), entry.getValue());
					}
}					else {{
						value.addAll((Vector)entry.getValue());
						mergedMap.put(entry.getKey(), value);
					}
}				}
			}
			return mergedMap;
		}
		public Object[] runReducers(Object obj) {
			HashMap map = (HashMap)obj;
			Iterator it = map.entrySet().iterator();
			int numKeys = map.entrySet().size();
			int mapSize;
			int numReducers;
			if (numKeys<numWorkers) {{
				mapSize = 1;
				numReducers = numKeys;
			}
}			else {{
				mapSize = numKeys/numWorkers;
				numReducers = numWorkers;
			}
}			System.out.println("Running reducers (#merged keys="+numKeys+")...");
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				int j = 0;
				for (int i = 0; i<numReducers; i++){
					HashMap newMap = new HashMap();
					while ((j<(i+1)*mapSize)||((i==(numReducers-1))&&(j<numKeys))) {
						Map.Entry entry = (Map.Entry)it.next();
						newMap.put(entry.getKey(), entry.getValue());
						j++;
					}
					{
						// workers[i]<-runReducer(newMap)
						{
							Object _arguments[] = { newMap };
							Message message = new Message( self, workers[i], "runReducer", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// dummy(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, self, "dummy", _arguments, token_2_0, currentMessage.getContinuationToken() );
					__messages.add( message );
				}
				throw new CurrentContinuationException();
			}
		}
		public void writeOutput(Object[] objs) {
			try {
				PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(outputFile)));
				for (int i = 0; i<objs.length; i++){
					HashMap map = (HashMap)objs[i];
					Iterator it = map.entrySet().iterator();
					String str;
					while (it.hasNext()) {
						Map.Entry entry = (Map.Entry)it.next();
						str = entry.getKey()+", ";
						Vector value = (Vector)entry.getValue();
						if (value.size()==1) {{
							str += value.get(0);
						}
}						else {{
							str += "[";
							for (int j = 0; j<value.size(); j++){
								Object obj = value.get(j);
								if (j==value.size()-1) {str += obj;
}								else {str += obj+", ";
}							}
							str += "]";
						}
}						if (System.getProperty("stdout")!=null) {System.out.println(str);
}						pw.println(str);
					}
				}
				pw.close();
			}
			catch (IOException ex) {
				System.err.println("Can't write the file "+outputFile);
			}

			System.out.println("Finished (elapsed time = "+((double)(System.currentTimeMillis()-startTime)/1000)+"s)");
			System.out.println();
		}
		long lastReportedTime = 0;
		public int reportMapProgress(boolean report, int id, int completed) {
			long currentTime = System.currentTimeMillis();
			completedMapTasks[id] = completed;
			if (report||lastReportedTime+REPORT_PROGRESS_INTERVAL<=currentTime) {{
				lastReportedTime = currentTime;
				int sum = 0;
				for (int i = 0; i<numWorkers; i++)sum += completedMapTasks[i];
				System.out.println(" Map: "+sum+"/"+numTasks+" ("+(100*sum/numTasks)+"%) completed");
			}
}			return completed;
		}
	}
}