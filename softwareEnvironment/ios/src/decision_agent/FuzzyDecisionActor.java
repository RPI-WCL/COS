package src.decision_agent;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import src.IOSTheater;
import src.profiling_agent.ActorProfile;
import src.profiling_agent.ProfilingAgent;
import src.profiling_agent.ATSProfilingAgent;
import java.util.Vector;
import salsa.language.ServiceFactory;
import salsa.messaging.TheaterService;
import salsa.naming.NamingService;
import salsa.naming.UAL;
import salsa.naming.UAN;

public class FuzzyDecisionActor extends UniversalActor  implements ActorService {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		FuzzyDecisionActor instance = (FuzzyDecisionActor)new FuzzyDecisionActor(uan, ual,null).construct();
		{
			Object[] _arguments = { args };
			instance.send( new Message(instance, instance, "act", _arguments, null, null) );
		}
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new FuzzyDecisionActor(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return FuzzyDecisionActor.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new FuzzyDecisionActor(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return FuzzyDecisionActor.getReferenceByLocation(new UAL(ual)); }
	public FuzzyDecisionActor(boolean o, UAN __uan)	{ super(false,__uan); }
	public FuzzyDecisionActor(boolean o, UAL __ual)	{ super(false,__ual); }

	public FuzzyDecisionActor(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null,null); }
	public FuzzyDecisionActor(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual,null); }
	public FuzzyDecisionActor(UniversalActor.State sourceActor)		{ this(null, null,null);  }
	public FuzzyDecisionActor()		{  }
	public FuzzyDecisionActor(UAN __uan, UAL __ual,Object sourceActor) {
		if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			createRemotely(__uan, __ual, "src.decision_agent.FuzzyDecisionActor");
		} else {
			State state = new State(__uan, __ual);
			state.updateSelf(this);
			ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct () {
		Object[] __arguments = {  };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State implements salsa.resources.ActorServiceState {
		public FuzzyDecisionActor self;
		public void updateSelf(ActorReference actorReference) {
			((FuzzyDecisionActor)actorReference).setUAL(getUAL());
			((FuzzyDecisionActor)actorReference).setUAN(getUAN());
			self = new FuzzyDecisionActor(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.muteGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "src.decision_agent.FuzzyDecisionActor$State" );
			addMethodsForClasses();
		}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		ATSProfilingAgent profilingAgent = null;
		ActorReference protocolActor = null;
		int sleepTime = 10000;
		long throughput = 0;
		double cw = 0.3, pw = 0.7;
		void construct(){
			protocolActor = IOSTheater.getProtocolActor();
			profilingAgent = (ATSProfilingAgent)IOSTheater.getProfilingAgent();
						{
				// begin()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "begin", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void begin() {
			if (System.getProperty("silent")==null) {{
				{
					// standardOutput<-println(System.currentTimeMillis()+"\t"+profilingAgent.processed()+"\t\t"+profilingAgent.getActorProfiles().size()+"\t"+profilingAgent.getAvailableProcessing())
					{
						Object _arguments[] = { System.currentTimeMillis()+"\t"+profilingAgent.processed()+"\t\t"+profilingAgent.getActorProfiles().size()+"\t"+profilingAgent.getAvailableProcessing() };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			throughput = profilingAgent.processed();
			if (!profilingAgent.isComputing()) {			{
				// protocolActor<-leaveComputation()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, protocolActor, "leaveComputation", _arguments, null, null );
					__messages.add( message );
				}
			}
}			if (profilingAgent.isComputing()) {{
				{
					// protocolActor<-initiateSteal()
					{
						Object _arguments[] = {  };
						Message message = new Message( self, protocolActor, "initiateSteal", _arguments, null, null );
						__messages.add( message );
					}
				}
			}
}			{
				// ()begin:((new Integer(sleepTime)))
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "begin", _arguments, null, null );
					Object[] _propertyInfo = { new Integer(sleepTime) };
					message.setProperty( "delay", _propertyInfo );
					__messages.add( message );
				}
			}
		}
		private double decisionFunction(ActorProfile candidate, UAL source, double remoteProcessing, Vector actorsAtSource) {
			String localId = protocolActor.getUAL().getLocation();
			String foreignId = source.getLocation();
			double localProcessing = profilingAgent.getCpuSpeed();
			double computationGain = java.lang.Math.ceil(profilingAgent.getActors().size()/localProcessing)-1-java.lang.Math.floor(actorsAtSource.size()/remoteProcessing);
			double totalCommunication = candidate.sent();
			if (totalCommunication<2) {{
				System.err.println("\tcandidate: "+candidate.getUAN().getIdentifier()+", gain: -99");
				return -99;
			}
}			double remoteCommunication = 0;
			for (int i = 0; i<actorsAtSource.size(); i++){
				remoteCommunication += candidate.getCommWith((UAN)actorsAtSource.get(i));
			}
			double localCommunication = 0;
			for (int i = 0; i<profilingAgent.getActors().size(); i++){
				UAN current_uan = (UAN)profilingAgent.getActors().get(i);
				if (!candidate.getUAN().equals(current_uan)) {localCommunication += candidate.getCommWith(current_uan);
}			}
			double communicationGain = ((remoteCommunication-localCommunication)/totalCommunication)*candidate.numTargets();
			double communication_bad = -1.5;
			double communication_good = 1.15;
			double comm_good, comm_bad;
			if (communicationGain<communication_bad) {comm_good = 0;
}			else {if (communicationGain>communication_good) {comm_good = 1;
}			else {comm_good = (communicationGain-communication_bad)/(communication_good-communication_bad);
}}			comm_bad = 1-comm_good;
			double computation_bad = -1.25;
			double computation_good = 1;
			double comp_good, comp_bad;
			if (computationGain<computation_bad) {comp_good = 0;
}			else {if (computationGain>computation_good) {comp_good = 1;
}			else {comp_good = (computationGain-computation_bad)/(computation_good-computation_bad);
}}			comp_bad = 1-comp_good;
			double comb_cmpb = java.lang.Math.min(comp_bad, comm_bad);
			double comb_cmpg = java.lang.Math.min(comp_bad, comm_good);
			double comg_cmpb = java.lang.Math.min(comp_good, comm_bad);
			double comg_cmpg = java.lang.Math.min(comp_good, comm_good);
			double gain;
			if (comb_cmpb>comb_cmpg&&comb_cmpb>comg_cmpb&&comb_cmpb>comg_cmpg) {gain = 0;
}			else {if (comb_cmpg>comg_cmpb&&comb_cmpg>comg_cmpg) {gain = (comp_good+comm_good)/2;
}			else {if (comg_cmpb>comg_cmpg) {gain = (comp_good+comm_good)/2;
}			else {gain = 1;
}}}			return gain;
		}
		public ActorReference getBestCandidate(UAL source, double remoteProcessing, Vector actorsAtSource) {
			ActorProfile candidate = null;
			double candidateGain = 0.5;
			if (!profilingAgent.isComputing()) {			return null;
}			System.out.println("Getting the best candidate from source: "+source.getIdentifier());
			Vector actorProfiles = profilingAgent.getActorProfiles();
			for (int i = 0; i<actorProfiles.size(); i++){
				ActorProfile current = (ActorProfile)actorProfiles.get(i);
				double gain = decisionFunction(current, source, remoteProcessing, actorsAtSource);
				System.err.println("\tcurrent: "+current.getUAN().getIdentifier()+",gain: "+gain);
				if (gain==-99) {				return null;
}				if (gain>candidateGain) {{
					candidate = current;
					candidateGain = gain;
				}
}			}
			if (candidate!=null) {{
				profilingAgent.removeProfile(candidate.getUAN());
				return UniversalActor.getReferenceByName(candidate.getUAN());
			}
}			return null;
		}
		public Long getThroughput() {
			return new Long(throughput);
		}
	}
}