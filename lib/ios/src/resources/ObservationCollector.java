package src.resources;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.


public class ObservationCollector extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		ObservationCollector instance = (ObservationCollector)new ObservationCollector(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new ObservationCollector(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return ObservationCollector.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new ObservationCollector(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return ObservationCollector.getReferenceByLocation(new UAL(ual)); }
	public ObservationCollector(boolean o, UAN __uan)	{ super(false,__uan); }
	public ObservationCollector(boolean o, UAL __ual)	{ super(false,__ual); }
	public ObservationCollector(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public ObservationCollector(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public ObservationCollector(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public ObservationCollector()		{  }
	public ObservationCollector(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "src.resources.ObservationCollector", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (long wait_time, long iterations) {
		Object[] __arguments = { new Long(wait_time), new Long(iterations) };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public ObservationCollector self;
		public void updateSelf(ActorReference actorReference) {
			((ObservationCollector)actorReference).setUAL(getUAL());
			((ObservationCollector)actorReference).setUAN(getUAN());
			self = new ObservationCollector(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "src.resources.ObservationCollector$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		long wait_time = 30000;
		long iterations = 100;
		String[] locations = new String[0];
		ActorReference[] protocol_agents = new ActorReference[0];
		ActorReference[] references = new ActorReference[0];
		void construct(long wait_time, long iterations){
			this.wait_time = wait_time;
			this.iterations = iterations;
		}
		public void initiate_collection() {
			System.err.println("Starting ObservationCollector.");
			{
				// randomly_reconfigure_application()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "randomly_reconfigure_application", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void register_actor(ActorReference actor) {
			System.err.println("Registering actor: "+actor.getUAN());
			int i;
			ActorReference[] temp = new ActorReference[references.length+1];
			for (i = 0; i<references.length; i++){
				temp[i] = references[i];
			}
			temp[i] = actor;
			references = temp;
		}
		public void register_location(String location) {
			location = location.substring(0, location.length()-1);
			System.err.println("Registering location: "+location);
			System.err.println("locations.length: "+locations.length);
			System.err.println("protocol_agents.length: "+protocol_agents.length);
			int i = 0;
			String[] temp = new String[locations.length+1];
			ActorReference[] temp2 = new ActorReference[protocol_agents.length+1];
			for (i = 0; i<locations.length; i++){
				temp[i] = locations[i];
				temp2[i] = protocol_agents[i];
			}
			temp[i] = location;
			temp2[i] = (ActorReference)UniversalActor.getReferenceByLocation(location+"/io/protocolActor");
			locations = temp;
			protocol_agents = temp2;
		}
		public void gather_observations() {
			System.err.println("Gathering observations");
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<protocol_agents.length; i++){
					{
						// protocol_agents[i]<-gather_observation()
						{
							Object _arguments[] = {  };
							Message message = new Message( self, protocol_agents[i], "gather_observation", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// print_responses(token)
				{
					Object _arguments[] = { token_2_0 };
					Message message = new Message( self, self, "print_responses", _arguments, token_2_0, token_2_1 );
					__messages.add( message );
				}
				// randomly_reconfigure_application()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "randomly_reconfigure_application", _arguments, token_2_1, null );
					__messages.add( message );
				}
			}
		}
		public void print_responses(Object[] responses) {
			for (int i = 0; i<responses.length; i++){
				System.out.println(responses[i]);
			}
		}
		public void randomly_reconfigure_application() {
			System.err.println("randomly reconfiguring application.");
			if (iterations>0) {{
				String random_location = locations[(int)(java.lang.Math.random()*(double)locations.length)];
				Token wait_token = new Token("wait_token");
				{
					// token wait_token = references[0]<-migrate(random_location+references[0].getUAL().getIdentifier())
					{
						Object _arguments[] = { random_location+references[0].getUAL().getIdentifier() };
						Message message = new Message( self, references[0], "migrate", _arguments, null, wait_token );
						__messages.add( message );
					}
				}
				for (int i = 1; i<references.length; i++){
					random_location = locations[(int)(java.lang.Math.random()*(double)locations.length)];
					{
						// wait_token = references[i]<-migrate(random_location+references[i].getUAL().getIdentifier())
						Token wait_token_next = new Token("<-_next");
						{
							Object _arguments[] = { random_location+references[i].getUAL().getIdentifier() };
							Message message = new Message( self, references[i], "migrate", _arguments, null, wait_token_next );
							Object[] _propertyInfo = { wait_token };
							message.setProperty( "waitfor", _propertyInfo );
							__messages.add( message );
						}
						wait_token = wait_token_next;
					}
				}
				{
					// ()reset_profiling_agents:((wait_token))
					{
						Object _arguments[] = {  };
						Message message = new Message( self, self, "reset_profiling_agents", _arguments, null, null );
						Object[] _propertyInfo = { wait_token };
						message.setProperty( "waitfor", _propertyInfo );
						__messages.add( message );
					}
				}
				iterations--;
			}
}		}
		public void reset_profiling_agents() {
			System.err.println("resetting profiling agents");
			{
				Token token_2_0 = new Token();
				// join block
				token_2_0.setJoinDirector();
				for (int i = 0; i<protocol_agents.length; i++){
					{
						// protocol_agents[i]<-reset_profiling_agent()
						{
							Object _arguments[] = {  };
							Message message = new Message( self, protocol_agents[i], "reset_profiling_agent", _arguments, null, token_2_0 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_0);
				// delay()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "delay", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
		public void delay() {
			{
				// ()gather_observations:((new Long(wait_time)))
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "gather_observations", _arguments, null, null );
					Object[] _propertyInfo = { new Long(wait_time) };
					message.setProperty( "delay", _propertyInfo );
					__messages.add( message );
				}
			}
		}
	}
}